services:
  # OpenWebUI service
  openwebui:
    image: tmfrisinger/open-webui:1.0.1
    ports:
      - "3000:3000"
    environment:
      - HOST=0.0.0.0
      - PORT=3000
      - WEBUI_AUTH_ENABLED=true
      - WEBUI_DB_BACKEND=postgres
      - POSTGRES_HOST=postgres_openwebui
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - DEFAULT_MODEL=${DEFAULT_MODEL}
      - OPENAI_API_KEY=${LITELLM_MASTER_KEY}
      - OPENAI_API_BASE_URL=http://caddy:80/v1
      - OPENAI_API_MODELS=${OPENAI_API_MODELS}
      - ENABLE_SIGNUP=true
      - ENABLE_OAUTH_SIGNUP=true
      - ENABLE_LOGIN_FORM=false
      - WEBUI_ALLOW_PASSWORD_RESET=true
      - WEBUI_REGISTRATION_ENABLED=true
      - WEBUI_SHOW_REGISTRATION=true
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_AUTH_ENABLED=true
      - ALLOWED_EMAIL_DOMAIN=${ALLOWED_EMAIL_DOMAIN}
      - GOOGLE_AUTO_REGISTER=true
    depends_on:
      litellm:
        condition: service_started
      postgres_openwebui:
        condition: service_healthy
    volumes:
      - openwebui_data:/app/backend/data
    restart: unless-stopped


  # LiteLLM Proxy service
  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    ports:
      - "8000:4000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PORT=4000
      - MODEL_TYPE=openai
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - LITELLM_SALT_KEY=${LITELLM_SALT_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_litellm:5432/${POSTGRES_DB}
      - STORE_MODEL_IN_DB=True
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MCP_API_KEY=${MCP_API_KEY}
      - PYTHONPATH=/app
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ./config/litellm_config.yaml:/app/config.yaml
      - ./rag_pipeline:/app/rag_pipeline
    command: ["--config", "/app/config.yaml", "--detailed_debug"]
    depends_on:
      postgres_litellm:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # PostgreSQL Database for OpenWebUI
  postgres_openwebui:
    image: postgres:14
    ports:
      - "5432:5432"  # OpenWebUI database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
    volumes:
      - postgres_openwebui_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    
  # PostgreSQL Database for LiteLLM
  postgres_litellm:
    image: postgres:14
    ports:
      - "5433:5432"  # LiteLLM database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_litellm_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    
  # PostgreSQL Database for MCP
  postgres_mcp:
    image: postgres:14
    ports:
      - "5435:5432"  # MCP database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=mcp
    volumes:
      - postgres_mcp_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    
  # Redis for LiteLLM caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # WebCat service for web search capabilities
  webcat:
    image: tmfrisinger/webcat:latest
    ports:
      - "8765:8765"
    environment:
      - PORT=8765
      - SERPER_API_KEY=${SERPER_API_KEY}
      - WEBCAT_API_KEY=${WEBCAT_API_KEY}
    restart: unless-stopped

  # Caddy reverse proxy
  caddy:
    build:
      context: ./config/caddy
      dockerfile: Dockerfile
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./config/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    depends_on:
      - openwebui
    restart: unless-stopped

  # Elasticsearch for document storage and retrieval
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/init.sh:/usr/local/bin/init-elasticsearch.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    command: >
      bash -c "
        /usr/local/bin/docker-entrypoint.sh &
        sleep 30 &&
        chmod +x /usr/local/bin/init-elasticsearch.sh &&
        /usr/local/bin/init-elasticsearch.sh &&
        wait
      "

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.13.0
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=512M
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc"]
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./config/neo4j/init.cypher:/docker-entrypoint-initdb.d/init.cypher
      - ./config/neo4j/plugins:/plugins
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Dagster PostgreSQL Database
  postgres_dagster:
    image: postgres:14
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=insight_mesh
    ports:
      - "5434:5432"  # Using a different port to avoid conflicts
    volumes:
      - postgres_dagster_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Dagster service for data pipeline orchestration
  dagster:
    build:
      context: ./dagster_project
      dockerfile: Dockerfile
    ports:
      - "3001:3000"  # Dagster Webserver
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/credentials.json
      - ELASTICSEARCH_HOST=elasticsearch
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - POSTGRES_HOST=postgres_dagster
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DBNAME=insight_mesh
    volumes:
      - ./dagster_project:/app
      - ./credentials:/app/credentials
    depends_on:
      - elasticsearch
      - neo4j
      - postgres_dagster
    restart: unless-stopped

  mcp:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    environment:
      - MCP_API_KEY=${MCP_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DB_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_mcp:5432/mcp
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_HOST=elasticsearch
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - MCP_HOST=0.0.0.0
      - MCP_PORT=9091
    ports:
      - "9090:9091"  # Map port 9090 to 9091 (FastMCP server port)
    depends_on:
      postgres_mcp:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped

  slack-bot:
    build:
      context: ./slack-bot
      dockerfile: Dockerfile
    environment:
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - SLACK_BOT_ID=${SLACK_BOT_ID}
      - LLM_API_URL=http://litellm:4000/v1
      - LLM_API_KEY=${LITELLM_MASTER_KEY}
      - LLM_MODEL=${LLM_MODEL}
    volumes:
      - ./slack-bot:/app
    command: ["python", "/app/app.py"]
    depends_on:
      - litellm
      - mcp
    restart: unless-stopped

volumes:
  openwebui_data:
  postgres_openwebui_data:
  postgres_litellm_data:
  postgres_mcp_data:
  redis_data:
  caddy_data:
  caddy_config:
  caddy_logs:
  elasticsearch_data:
  neo4j_data:
  neo4j_logs:
  postgres_dagster_data:
